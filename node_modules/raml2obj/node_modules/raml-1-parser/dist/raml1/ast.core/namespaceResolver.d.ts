
import ll = require("../lowLevelAST");
export declare class NamespaceResolver {
    private expandedAbsToNsMap;
    private _expandedNSMap;
    private byPathMap;
    private byNsMap;
    private _hasFragments;
    private _unitModels;
    hasTemplates(unit: ll.ICompilationUnit): boolean;
    resolveNamespace(from: ll.ICompilationUnit, to: ll.ICompilationUnit): UsesInfo;
    expandedNSMap(unit: ll.ICompilationUnit): {
        [key: string]: UsesInfo;
    };
    expandedPathMap(unit: ll.ICompilationUnit): {
        [key: string]: UsesInfo;
    };
    private calculateExpandedNamespaces(_unit);
    pathMap(unit: ll.ICompilationUnit): {
        [key: string]: UsesInfo;
    };
    nsMap(unit: ll.ICompilationUnit): {
        [key: string]: UsesInfo;
    };
    private calculateNamespaces(unit);
    private lexLessEq(a, b);
    hasFragments(unit: ll.ICompilationUnit): boolean;
    unitModel(unit: ll.ICompilationUnit): UnitModel;
}
export declare class UsesInfo {
    usesNodes: ll.ILowLevelASTNode[];
    unit: ll.ICompilationUnit;
    includePath: string;
    constructor(usesNodes: ll.ILowLevelASTNode[], unit: ll.ICompilationUnit, includePath: string);
    namespaceSegments: string[];
    steps(): number;
    namespace(): string;
    absolutePath(): string;
}
export declare class ElementsCollection {
    name: string;
    private static CLASS_IDENTIFIER;
    static isInstance(instance: any): instance is ElementsCollection;
    getClassIdentifier(): string[];
    constructor(name: string);
    array: ll.ILowLevelASTNode[];
    map: {
        [key: string]: ll.ILowLevelASTNode;
    };
    addElement(node: ll.ILowLevelASTNode): void;
    hasElement(name: string): boolean;
    getElement(name: string): ll.ILowLevelASTNode;
    isEmpty(): boolean;
}
export declare class UnitModel {
    unit: ll.ICompilationUnit;
    constructor(unit: ll.ICompilationUnit);
    resourceTypes: ElementsCollection;
    traits: ElementsCollection;
    securitySchemes: ElementsCollection;
    annotationTypes: ElementsCollection;
    types: ElementsCollection;
    private initCollections();
    private contributeCollection(c, nodes, isRAML08?);
    private libTypeDescendants;
    private isLibraryBaseDescendant(unit);
}
