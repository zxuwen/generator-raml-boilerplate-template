{
  "SCHEMA_AND_TYPE": {
    "code" : "SCHEMA_AND_TYPE",
    "message" : "'schema' and 'type' are mutually exclusive"
  },
  "REQUIRED_OVERRIDE_OPTIONAL" : {
    "code" : "REQUIRED_OVERRIDE_OPTIONAL",
    "message": "Can not override required property '{{propertyName}}' to be optional"
  },
  "CYCLIC_DEPENDENCY" : {
    "code" : "CYCLIC_DEPENDENCY",
    "message": "'{{typeName}}' has cyclic dependency"
  },
  "REDEFINIG_BUILDTIN" : {
    "code" : "REDEFINIG_BUILDTIN",
    "message": "Redefining a built in type: {{typeName}}"
  },
  "RECURRENT_DEFINITION" : {
    "code" : "RECURRENT_DEFINITION",
    "message": "Recurrent type definition"
  },
  "INHERITING_UNKNOWN_TYPE" : {
    "code" : "INHERITING_UNKNOWN_TYPE",
    "message": "Inheriting from unknown type"
  },
  "RECURRENT_UNION_OPTION" : {
    "code" : "RECURRENT_UNION_OPTION",
    "message": "Recurrent type as an option of union type"
  },
  "UNKNOWN_UNION_OPTION" : {
    "code" : "UNKNOWN_UNION_OPTION",
    "message": "Unknown type as an option of union type"
  },
  "RECURRENT_ARRAY_DEFINITION" : {
    "code" : "RECURRENT_ARRAY_DEFINITION",
    "message": "Recurrent array type definition"
  },
  "UNKNOWN_ARRAY_COMPONENT" : {
    "code" : "UNKNOWN_ARRAY_COMPONENT",
    "message": "Referring to unknown type '{{componentTypeName}}' as an array component type"
  },
  "EXTERNALS_MIX" : {
    "code" : "EXTERNALS_MIX",
    "message": "It is not allowed to mix RAML types with externals"
  },
  "12" : {
    "code" : "12",
    "message": ""
  },
  "EXTERNAL_FACET" : {
    "code" : "EXTERNAL_FACET",
    "message": "External types can not declare facet '{{name}}'"
  },
  "OVERRIDE_FACET" : {
    "code" : "OVERRIDE_FACET",
    "message": "Facet '{{name}}' can not be overriden"
  },
  "OVERRIDE_BUILTIN_FACET" : {
    "code" : "OVERRIDE_BUILTIN_FACET",
    "message": "Built in facet '{{name}}' can not be overriden"
  },
  "FACET_START_BRACKET" : {
    "code" : "FACET_START_BRACKET",
    "message": "Facet '{{name}}' can not start from '('"
  },
  "FACET_PROHIBITED_FOR_EXTERNALS" : {
    "code" : "FACET_PROHIBITED_FOR_EXTERNALS",
    "message": "'{{facetName}}' facet is prohibited for external types"
  },
  "UNKNOWN_FACET" : {
    "code" : "UNKNOWN_FACET",
    "message": "Specifying unknown facet: '{{facetName}}'"
  },
  "MISSING_REQUIRED_FACETS" : {
    "code" : "MISSING_REQUIRED_FACETS",
    "message": "Missing required facets: {{facetsList}}"
  },
  "OBJECT_EXPECTED" : {
    "code" : "OBJECT_EXPECTED",
    "message": "object is expected"
  },
  "NULL_NOT_ALLOWED" : {
    "code" : "NULL_NOT_ALLOWED",
    "message": "Null or undefined value is not allowed"
  },
  "DISCRIMINATOR_NEEDED" : {
    "code" : "DISCRIMINATOR_NEEDED",
    "message": "Can not discriminate types '{{name1}}' and '{{name2}}' without discriminator"
  },
  "SAME_DISCRIMINATOR_VALUE" : {
    "code" : "SAME_DISCRIMINATOR_VALUE",
    "message": "Types '{{name1}}' and '{{name2}}' have same discriminator value"
  },
  "24" : {
    "code" : "24",
    "message": ""
  },
  "25" : {
    "code" : "25",
    "message": ""
  },
  "NOTHING" : {
    "code" : "NOTHING",
    "message": "nothing"
  },
  "TYPE_EXPECTED" : {
    "code" : "TYPE_EXPECTED",
    "message": "{{typeName}} is expected"
  },
  "INTEGER_EXPECTED" : {
    "code" : "INTEGER_EXPECTED",
    "message": "integer is expected"
  },
  "NULL_EXPECTED" : {
    "code" : "NULL_EXPECTED",
    "message": "null is expected"
  },
  "SCALAR_EXPECTED" : {
    "code" : "SCALAR_EXPECTED",
    "message": "scalar is expected"
  },
  "INCORRECT_DISCRIMINATOR" : {
    "code" : "INCORRECT_DISCRIMINATOR",
    "message": "None of the '{{rootType}}' type known subtypes declare '{{value}}' as value of discriminating property '{{propName}}'."
  },
  "MISSING_DISCRIMINATOR" : {
    "code" : "MISSING_DISCRIMINATOR",
    "message": "Instance of '{{rootType}}' subtype misses value of the discriminating property '{{propName}}'."
  },
  "INVALID_DATEONLY" : {
    "code" : "INVALID_DATEONLY",
    "message": "'date-only' instance should match 'yyyy-mm-dd' pattern"
  },
  "INVALID_TIMEONLY" : {
    "code" : "INVALID_TIMEONLY",
    "message": "'time-only' instance should match 'hh:mm:ss[.ff...]' pattern"
  },
  "INVALID_DATETIMEONLY" : {
    "code" : "INVALID_DATETIMEONLY",
    "message": "'datetime-only' instance should match 'yyyy-mm-ddThh:mm:ss[.ff...]' pattern"
  },
  "INVALID_RFC3339" : {
    "code" : "INVALID_RFC3339",
    "message": "Valid rfc3339 formatted string is expected"
  },
  "INVALID_RFC2616" : {
    "code" : "INVALID_RFC2616",
    "message": "Valid rfc2616 formatted string is expected"
  },
  "INVALID_DATTIME" : {
    "code" : "INVALID_DATTIME",
    "message": "Valid datetime formatted string is expected"
  },
  "UNKNOWN_ANNOTATION" : {
    "code" : "UNKNOWN_ANNOTATION",
    "message": "Using unknown annotation type: '{{facetName}}'"
  },
  "INVALID_ANNOTATION_VALUE" : {
    "code" : "INVALID_ANNOTATION_VALUE",
    "message": "Invalid annotation value {{msg}}"
  },
  "CAN_NOT_PARSE_JSON" : {
    "code" : "CAN_NOT_PARSE_JSON",
    "message": "Can not parse JSON example: {{msg}}"
  },
  "INVALID_XML" : {
    "code" : "INVALID_XML",
    "message": "Invalid XML."
  },
  "STRICT_BOOLEAN" : {
    "code" : "STRICT_BOOLEAN",
    "message": "'strict' should be boolean"
  },
  "DISPLAY_NAME_STRING" : {
    "code" : "DISPLAY_NAME_STRING",
    "message": "'displayName' should be string"
  },
  "DESCRIPTION_STRING" : {
    "code" : "DESCRIPTION_STRING",
    "message": "'description' should be string"
  },
  "INVALID_EXMAPLE" : {
    "code" : "INVALID_EXMAPLE",
    "message": "Using invalid 'example': {{msg}}"
  },
  "ADDITIONAL_PROPERTIES_BOOLEAN" : {
    "code" : "REQUIRED_BOOLEAN",
    "message": "Value of 'additionalProperties' facet should be boolean"
  },
  "REQUIRED_BOOLEAN" : {
    "code" : "REQUIRED_BOOLEAN",
    "message": "Value of 'required' facet should be boolean"
  },
  "UNIQUE_ITEMS_BOOLEAN" : {
    "code" : "UNIQUE_ITEMS_BOOLEAN",
    "message": "Value of 'uniqueItems' facet should be boolean"
  },
  "EXMAPLES_MAP" : {
    "code" : "EXMAPLES_MAP",
    "message": "'examples' value should be a map"
  },
  "INVALID_DEFAULT_VALUE" : {
    "code" : "INVALID_DEFAULT_VALUE",
    "message": "Using invalid 'defaultValue': {{msg}}"
  },
  "DISCRIMINATOR_FOR_UNION" : {
    "code" : "DISCRIMINATOR_FOR_UNION",
    "message": "You can not specify 'discriminator' for union types"
  },
  "DISCRIMINATOR_FOR_OBJECT" : {
    "code" : "DISCRIMINATOR_FOR_OBJECT",
    "message": "You only can use 'discriminator' with object types"
  },
  "DISCRIMINATOR_FOR_INLINE" : {
    "code" : "DISCRIMINATOR_FOR_INLINE",
    "message": "You can not specify 'discriminator' for inline type declarations"
  },
  "UNKNOWN_FOR_DISCRIMINATOR" : {
    "code" : "UNKNOWN_FOR_DISCRIMINATOR",
    "message": "Using unknown property '{{value}}' as discriminator"
  },
  "SCALAR_FOR_DISCRIMINATOR" : {
    "code" : "SCALAR_FOR_DISCRIMINATOR",
    "message": "It is only allowed to use scalar properties as discriminators"
  },
  "DISCRIMINATOR_VALUE_WITHOUT_DISCRIMINATOR" : {
    "code" : "DISCRIMINATOR_VALUE_WITHOUT_DISCRIMINATOR",
    "message": "You can not use 'discriminatorValue' without declaring 'discriminator'"
  },
  "INVALID_DISCRIMINATOR_VALUE" : {
    "code" : "INVALID_DISCRIMINATOR_VALUE",
    "message": "Using invalid 'disciminatorValue': {{msg}}"
  },
  "PROPERTIES_MAP" : {
    "code" : "PROPERTIES_MAP",
    "message": "'properties' should be a map"
  },
  "FACETS_MAP" : {
    "code" : "FACETS_MAP",
    "message": "'facets' should be a map"
  },
  "VALIDATING_AGAINS_UNKNOWN" : {
    "code" : "VALIDATING_AGAINS_UNKNOWN",
    "message": "Validating instance against unknown type: '{{typeName}}'"
  },
  "EXTERNAL_IN_PROPERTY_DEFINITION" : {
    "code" : "EXTERNAL_IN_PROPERTY_DEFINITION",
    "message": "It is not allowed to use external types in property definitions"
  },
  "UNKNOWN_IN_PROPERTY_DEFINITION" : {
    "code" : "UNKNOWN_IN_PROPERTY_DEFINITION",
    "message": "Property '{{propName}}' refers to unknown type '{{typeName}}'"
  },
  "ERROR_IN_RANGE" : {
    "code" : "ERROR_IN_RANGE",
    "message": "Property '{{propName}}' range type has error: {{msg}}"
  },
  "INCORRECT_SCHEMA" : {
    "code" : "INCORRECT_SCHEMA",
    "message": "Incorrect schema: {{msg}}"
  },
  "UNABLE_TO_VALIDATE_XML" : {
    "code" : "UNABLE_TO_VALIDATE_XML",
    "message": "Unable to validate example against schema (xmllint)"
  },
  "CIRCULAR_REFS_IN_JSON_SCHEMA" : {
    "code" : "CIRCULAR_REFS_IN_JSON_SCHEMA",
    "message": "JSON schema contains circular references"
  },
  "EXAMPLE_SCHEMA_FAILURE" : {
    "code" : "EXAMPLE_SCHEMA_FAILURE",
    "message": "Example does not conform to schema: {{msg}}"
  },
  "JOSN_EXAMPLE_VALIDATION_EXCEPTION" : {
    "code" : "JOSN_EXAMPLE_VALIDATION_EXCEPTION",
    "message": "Validating example against schema caused an exception: {{msg}}"
  },
  "UNKNOWN_PROPERTY" : {
    "code" : "UNKNOWN_PROPERTY",
    "message": "Unknown property: '{{propName}}'"
  },
  "REQUIRED_PROPERTY_MISSING" : {
    "code" : "REQUIRED_PROPERTY_MISSING",
    "message": "Required property '{{propName}}' is missing"
  },
  "INVALID_REGEXP" : {
    "code" : "INVALID_REGEXP",
    "message": "{{msg}}"
  },
  "FACET_USAGE_RESTRICTION" : {
    "code" : "FACET_USAGE_RESTRICTION",
    "message": "{{facetName}} facet can only be used with {{typeNames}} types"
  },
  "FACET_REQUIRE_NUMBER" : {
    "code" : "FACET_REQUIRE_NUMBER",
    "message": "'{{facetName}}' value should be a number"
  },
  "FACET_REQUIRE_INTEGER" : {
    "code" : "FACET_REQUIRE_INTEGER",
    "message": "'{{facetName}}' value should be an integer"
  },
  "MIN_VALUE" : {
    "code" : "MIN_VALUE",
    "message": "'{{facetName}}' value should be at least {{minValue}}"
  },
  "EVEN_RATIO" : {
    "code" : "EVEN_RATIO",
    "message": "result of division of {{val1}} on {{val2}} should be integer"
  },
  "MUST_BE_UNIQUE" : {
    "code" : "MUST_BE_UNIQUE",
    "message": "items should be unique"
  },
  "ARRAY_AGAINST_UNKNOWN" : {
    "code" : "ARRAY_AGAINST_UNKNOWN",
    "message": "Array instance is validated against unknown type: '{{typeName}}'"
  },
  "INVALID_COMPONENT_TYPE" : {
    "code" : "INVALID_COMPONENT_TYPE",
    "message": "Component type has error: {{msg}}"
  },
  "EXTERNAL_AS_COMPONENT" : {
    "code" : "EXTERNAL_AS_COMPONENT",
    "message": "It is not allowed to use external types in component type definitions"
  },
  "UNKNOWN_AS_COMPONENT" : {
    "code" : "UNKNOWN_AS_COMPONENT",
    "message": "Component refers to unknown type {{typeName}}"
  },
  "PATTERN_VIOLATION" : {
    "code" : "PATTERN_VIOLATION",
    "message": "String should match to '{{value}}'"
  },
  "ALLOWED_FORMAT_VALUES" : {
    "code" : "ALLOWED_FORMAT_VALUES",
    "message": "Following format values are allowed: {{allowedValues}}"
  },
  "ENUM_RESTRICTION" : {
    "code" : "ENUM_RESTRICTION",
    "message": "value should be one of: {{values}}"
  },
  "ENUM_OWNER_TYPES" : {
    "code" : "ENUM_OWNER_TYPES",
    "message": "'enum' facet can only be used with: {{typeNames}}"
  },
  "ENUM_ARRAY" : {
    "code" : "ENUM_ARRAY",
    "message": "'enum' facet value must be defined by array"
  },
  "RESTRICTIONS_CONFLICT" : {
    "code" : "RESTRICTIONS_CONFLICT",
    "message": null
  },
  "MINMAX_RESTRICTION_VIOLATION" : {
    "code" : "MINMAX_RESTRICTION_VIOLATION",
    "message": null
  },
  "UNION_TYPE_FAILURE" : {
    "code" : "UNION_TYPE_FAILURE",
    "message": "Union type options do not pass validation"
  },
  "UNION_TYPE_FAILURE_DETAILS" : {
    "code" : "UNION_TYPE_FAILURE_DETAILS",
    "message": "Union type option does not pass validation ({{msg}})"
  },
  "INVALID_JSON_SCHEMA_DETAILS" : {
    "code" : "INVALID_JSON_SCHEMA_DETAILS",
    "message": "Invalid JSON schema: {{msg}}"
  },
  "INVALID_JSON_SCHEMA" : {
    "code" : "INVALID_JSON_SCHEMA",
    "message": "Invalid JSON schema"
  },
  "JSON_SCHEMA_VALIDATION_EXCEPTION" : {
    "code" : "JSON_SCHEMA_VALIDATION_EXCEPTION",
    "message": "Schema validation exception: {{msg}}"
  },
  "REFERENCE_NOT_FOUND" : {
    "code" : "REFERENCE_NOT_FOUND",
    "message": "Reference not found: {{ref}}"
  },
  "INVALID_XML_SCHEMA" : {
    "code" : "INVALID_XML_SCHEMA",
    "message": "Invalid XML schema content"
  },
  "INVALID_ANNOTATION_LOCATION" : {
    "code" : "INVALID_ANNOTATION_LOCATION",
    "message" : "Annotation '{{aName}}' can not be placed at this location, allowed targets are: {{aValues}}"
  },
  "CONTENT_DOES_NOT_MATCH_THE_SCHEMA" : {
    "code" : "CONTENT_DOES_NOT_MATCH_THE_SCHEMA",
    "message" : "Content is not valid according to schema: {{msg}}"
  },
  "EXTERNAL_TYPE_ERROR" : {
    "code" : "EXTERNAL_TYPE_ERROR",
    "message" : "Referenced type '{{typeName}}' does not match '{{objectName}}' root node"
  },
  "CAN_NOT_PARSE_SCHEMA" : {
    "code" : "CAN_NOT_PARSE_SCHEMA",
    "message": "Can not parse schema"
  },
  "FILE_TYPES_SHOULD_BE_AN_ARRAY" : {
    "code" : "FILE_TYPES_SHOULD_BE_AN_ARRAY",
    "message": "'fileTypes' value should be an array of strings"
  },
  "FACET_CAN_NOT_BE_FIXED_BY_THE_DECLARING_TYPE" : {
    "code" : "FACET_CAN_NOT_BE_FIXED_BY_THE_DECLARING_TYPE",
    "message": "A facet  can not be fixed by the declaring type"
  },
  "ITEMS_SHOULD_BE_REFERENCE_OR_INLINE_TYPE" : {
    "code" : "ITEMS_SHOULD_BE_REFERENCE_OR_INLINE_TYPE",
    "message": "The 'items' property value should be either a reference to an existing type or an inline type declaration"
  },
  "VALUE_SHOULD_BE_POSITIVE" : {
    "code" : "VALUE_SHOULD_BE_POSITIVE",
    "message": "Value of the '{{facetName}}' facet should be positive"
  }
}